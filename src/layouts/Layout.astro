---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Julio Daniel and Sharon's Wedding" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{title}</title>
	</head>
	<body>
		<slot />
	</body>
</html>
<style is:global>
	.flip {
		transform: rotateY(180deg) rotate(45deg);
	}
	.item-right {
        flex-direction: row-reverse;
    }
    .item-left {
        flex-direction: row;
    }
    .side-right {
        transform: translateX(-100%);
        opacity: 0;
    }
    .side-left {
        transform: translateX(100%);
        opacity: 0;
    }
    .line-right, .line-left {
        transform-origin: left;
        width: 0;
    }
    .line-left {
        transform-origin: right;
    }
	.show-line {
		width: 100%;
    }
	.appears {
		transform: translateX(0%);
		opacity: 1;
	}
	.to-show {
		transform: translateY(100%);
		transition: transform 300ms ease-in;
		opacity: 0;
	}
	.show-text {
		transform: translateY(0%);
		opacity: 1;
	}
	@font-face {
		font-family: "athelas";
		src: url('/fonts/athelas.ttc');
	}
	@font-face {
		font-family: "avenir";
		src: url('/fonts/avenir.ttc');
	}
	@font-face {
		font-family: "sweet";
		src: url('/fonts/sweet.ttf');
	}
</style>

<script>

	const items = document.querySelectorAll('.side-right, .side-left')
	const observer = new IntersectionObserver((items) => {
		items.forEach(item => {
			if (item.isIntersecting) {
				item.target.classList.add("appears")
				observer.unobserve(item.target)
			}
		})    
	}, {
		threshold: 0.4,
	})


	items.forEach(item => {
		observer.observe(item)
	})

	const lines = document.querySelectorAll('.line-right, .line-left')
	const lineObserver = new IntersectionObserver((lines) => {
		lines.forEach(line => {
			if (line.isIntersecting) {
				line.target.classList.toggle("show-line")
				lineObserver.unobserve(line.target)
			}
		})    
	}, {
		threshold: 0.5,
	})

	lines.forEach(line => {
		lineObserver.observe(line)
	})


	const titles = document.querySelectorAll('.to-show')
	const textObserver = new IntersectionObserver((titles) => {
		titles.forEach(text => {
			if (text.isIntersecting) {
				text.target.classList.toggle("show-text")
				textObserver.unobserve(text.target)
			}
		})    
	}, {
		threshold: 0.4,
	})

	titles.forEach(text => {
		textObserver.observe(text)
	})


</script>
